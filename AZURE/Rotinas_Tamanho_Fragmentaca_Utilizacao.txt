
/*

	Instruções para execução desse Script

	Criar a função abaixo e depois dar um F5 no Script
	
	CREATE FUNCTION dbo.getdate2()
	RETURNS datetime
	WITH SCHEMABINDING
	AS
		begin
		DECLARE @getdate datetime
		SET @getdate = SYSDATETIMEOFFSET() AT TIME ZONE 'E. South America Standard Time'
		RETURN @getdate
	end

*/
GO

if object_id('Historico_Tamanho_Tabela') is not null
	drop table Historico_Tamanho_Tabela

if object_id('BaseDados') is not null
	drop table BaseDados

if object_id('Tabela') is not null
	drop table Tabela

if object_id('Servidor') is not null
	drop table Servidor


CREATE TABLE [dbo].[Historico_Tamanho_Tabela](
	[Id_Historico_Tamanho] [int] IDENTITY(1,1) NOT NULL,
	[Id_Servidor] [smallint] NULL,
	[Id_BaseDados] [smallint] NULL,
	[Id_Tabela] [int] NULL,
	[Nm_Drive] [char](1) NULL,
	[Nr_Tamanho_Total] [numeric](9, 2) NULL,
	[Nr_Tamanho_Dados] [numeric](9, 2) NULL,
	[Nr_Tamanho_Indice] [numeric](9, 2) NULL,
	[Qt_Linhas] [bigint] NULL,
	[Dt_Referencia] [date] NULL,
 CONSTRAINT [PK_Historico_Tamanho_Tabela] PRIMARY KEY CLUSTERED 
(
	[Id_Historico_Tamanho] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

CREATE TABLE [dbo].[BaseDados](
	[Id_BaseDados] [int] IDENTITY(1,1) NOT NULL,
	[Nm_Database] [varchar](100) NULL
	 CONSTRAINT [PK_BaseDados] PRIMARY KEY CLUSTERED (Id_BaseDados)

) ON [PRIMARY]


CREATE TABLE [dbo].[Tabela](
	[Id_Tabela] [int] IDENTITY(1,1) NOT NULL,
	[Nm_Tabela] [varchar](1000) NULL,
 CONSTRAINT [PK_Tabela] PRIMARY KEY CLUSTERED 
(
	[Id_Tabela] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]


CREATE TABLE [dbo].[Servidor](
	[Id_Servidor] [int] IDENTITY(1,1) NOT NULL,
	[Nm_Servidor] [varchar](50) NOT NULL,
 CONSTRAINT [PK_Servidor] PRIMARY KEY CLUSTERED 
(
	[Id_Servidor] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
if object_id('vwTamanho_Tabela') is not null
	drop view vwTamanho_Tabela
GO
create view vwTamanho_Tabela
AS
select A.Dt_Referencia, B.Nm_Servidor, C.Nm_Database,D.Nm_Tabela ,A.Nm_Drive, A.Nr_Tamanho_Total, A.Nr_Tamanho_Dados,
	A.Nr_Tamanho_Indice, A.Qt_Linhas
from Historico_Tamanho_Tabela A
	join Servidor B on A.Id_Servidor = B.Id_Servidor
	join BaseDados C on A.Id_BaseDados = C.Id_BaseDados
	join Tabela D on A.Id_Tabela = D.Id_Tabela


GO
GO
if object_id('stpTamanhos_Tabelas') is not null
	drop procedure stpTamanhos_Tabelas
GO

CREATE proc [dbo].[stpTamanhos_Tabelas]
as

	if object_id('tempdb..#Tamanho_Tabelas') is not null 
		drop table #Tamanho_Tabelas
				
	CREATE TABLE #Tamanho_Tabelas(
		Nm_Servidor VARCHAR(256),
		Nm_Database varchar(256),
		[Nm_Schema] [varchar](8000) NULL,
		[Nm_Tabela] [varchar](8000) NULL,
		[Nm_Index] [varchar](8000) NULL,
		Nm_Drive CHAR(1),
		[Used_in_kb] [int] NULL,
		[Reserved_in_kb] [int] NULL,
		[Tbl_Rows] [bigint] NULL,
		[Type_Desc] [varchar](20) NULL
	) ON [PRIMARY]

	insert into #Tamanho_Tabelas
	select @@SERVERNAME Nm_Servidor						
		, db_name() Nm_Database, t.schema_name, t.table_Name, t.Index_name,
		(SELECT SUBSTRING(filename,1,1) 
		FROM .sys.sysfiles 
		WHERE fileid = 1),
	sum(t.used) as used_in_kb,
	sum(t.reserved) as Reserved_in_kb,
		max(t.tbl_rows)  as rows,
	type_Desc
	from (
		select s.name as schema_name, 
				o.name as table_Name,
				coalesce(i.name,'heap') as Index_name,
				p.used_page_Count*8 as used,
				p.reserved_page_count*8 as reserved, 
				p.row_count as ind_rows,
				(case when i.index_id in (0,1) then p.row_count else 0 end) as tbl_rows, 
				i.type_Desc as type_Desc
		from 
			sys.dm_db_partition_stats p
			join sys.objects o on o.object_id = p.object_id
			join sys.schemas s on s.schema_id = o.schema_id
			left join sys.indexes i on i.object_id = p.object_id and i.index_id = p.index_id
		where o.type_desc = 'user_Table' and o.is_Ms_shipped = 0
	) as t
	group by t.schema_name, t.table_Name,t.Index_name,type_Desc

			
	INSERT INTO dbo.Servidor(Nm_Servidor)
	SELECT DISTINCT A.Nm_Servidor 
	FROM #Tamanho_Tabelas A
		LEFT JOIN dbo.Servidor B ON A.Nm_Servidor = B.Nm_Servidor
	WHERE B.Nm_Servidor IS null
		
	INSERT INTO dbo.BaseDados(Nm_Database)
	SELECT DISTINCT A.Nm_Database 
	FROM #Tamanho_Tabelas A
		LEFT JOIN dbo.BaseDados B ON A.Nm_Database = B.Nm_Database
	WHERE B.Nm_Database IS null
	
	INSERT INTO dbo.Tabela(Nm_Tabela)
	SELECT DISTINCT A.Nm_Tabela 
	FROM #Tamanho_Tabelas A
		LEFT JOIN dbo.Tabela B ON A.Nm_Tabela = B.Nm_Tabela
	WHERE B.Nm_Tabela IS null	

	insert into dbo.Historico_Tamanho_Tabela(Id_Servidor,Id_BaseDados,Id_Tabela,Nm_Drive,Nr_Tamanho_Total,
				Nr_Tamanho_Dados,Nr_Tamanho_Indice,Qt_Linhas,Dt_Referencia)
	select B.Id_Servidor, D.Id_BaseDados, C.Id_Tabela ,UPPER(A.Nm_Drive),
			sum(Reserved_in_kb)/1024.00 [Reservado (KB)], 
			sum(case when Type_Desc in ('CLUSTERED','HEAP') then Reserved_in_kb else 0 end)/1024.00 [Dados (KB)], 
			sum(case when Type_Desc in ('NONCLUSTERED') then Reserved_in_kb else 0 end)/1024.00 [Indices (KB)],
			max(Tbl_Rows) Qtd_Linhas,
			CONVERT(VARCHAR, dbo.getdate2() ,112)						 
	from #Tamanho_Tabelas A
		JOIN dbo.Servidor B ON A.Nm_Servidor = B.Nm_Servidor 
		JOIN dbo.Tabela C ON A.Nm_Tabela = C.Nm_Tabela
		JOIN dbo.BaseDados D ON A.Nm_Database = D.Nm_Database
			LEFT JOIN dbo.Historico_Tamanho_Tabela E ON B.Id_Servidor = E.Id_Servidor 
								AND D.Id_BaseDados = E.Id_BaseDados AND C.Id_Tabela = E.Id_Tabela 
								AND E.Dt_Referencia = CONVERT(VARCHAR, dbo.getdate2() ,112)    
	where Nm_Index is not null	and Type_Desc is not NULL
		AND E.Id_Historico_Tamanho IS NULL 
	group by B.Id_Servidor, D.Id_BaseDados, C.Id_Tabela,UPPER(A.Nm_Drive), E.Dt_Referencia

	delete from Historico_Tamanho_Tabela
	where Dt_Referencia < getdate()-180

GO
----------------------------- HISTORICO FRAGMENTACAO DE INDICE
if object_id('Historico_Fragmentacao_Indice') is not null
	drop table Historico_Fragmentacao_Indice
GO
CREATE TABLE Historico_Fragmentacao_Indice(
	[Id_Hitorico_Fragmentacao_Indice] [int] IDENTITY(1,1) NOT NULL,
	[Dt_Referencia] date NULL,
	[Id_Servidor] [smallint] NULL,
	[Id_BaseDados] [smallint] NULL,
	[Id_Tabela] [int] NULL,
	[Nm_Indice] [varchar](1000) NULL,
	Nm_Schema varchar(50),
	[Avg_Fragmentation_In_Percent] [numeric](5, 2) NULL,
	[Page_Count] [int] NULL,
	[Fill_Factor] [tinyint] NULL,
	[Fl_Compressao] [tinyint] NULL
) ON [PRIMARY]


GO
if object_id('vwHistorico_Fragmentacao_Indice') is not null
	drop View vwHistorico_Fragmentacao_Indice

GO
create view vwHistorico_Fragmentacao_Indice
AS
select A.Dt_Referencia, B.Nm_Servidor, C.Nm_Database,D.Nm_Tabela ,A.Nm_Indice, A.Nm_Schema, 
	A.Avg_Fragmentation_In_Percent, A.Page_Count, A.Fill_Factor, A.Fl_Compressao
from Historico_Fragmentacao_Indice A
	join Servidor B on A.Id_Servidor = B.Id_Servidor
	join BaseDados C on A.Id_BaseDados = C.Id_BaseDados
	join Tabela D on A.Id_Tabela = D.Id_Tabela
GO



if object_id('stpCarga_Fragmentacao_Indice') is not null
	drop procedure stpCarga_Fragmentacao_Indice
GO

CREATE procedure [dbo].[stpCarga_Fragmentacao_Indice]
AS
BEGIN
	SET NOCOUNT ON
	 
	
	IF object_id('tempdb..#Historico_Fragmentacao_Indice') IS NOT NULL DROP TABLE #Historico_Fragmentacao_Indice
	
	CREATE TABLE #Historico_Fragmentacao_Indice(
		[Id_Hitorico_Fragmentacao_Indice] [int] IDENTITY(1,1) NOT NULL,
		[Dt_Referencia] date NULL,
		[Nm_Servidor] VARCHAR(50) NULL,
		[Nm_Database] VARCHAR(100) NULL,
		[Nm_Tabela] VARCHAR(1000) NULL,
		[Nm_Indice] [varchar](1000) NULL,
		Nm_Schema varchar(50),
		[Avg_Fragmentation_In_Percent] [numeric](5, 2) NULL,
		[Page_Count] [int] NULL,
		[Fill_Factor] [tinyint] NULL,
		[Fl_Compressao] [tinyint] NULL
	) ON [PRIMARY]

 
		insert into #Historico_Fragmentacao_Indice
	select dbo.getdate2(), @@servername Nm_Servidor,  DB_NAME() Nm_Database, D.Name Nm_Tabela,  B.Name Nm_Indice,F.name Nm_Schema, avg_fragmentation_in_percent,
			page_Count,fill_factor,data_compression	
	from sys.dm_db_index_physical_stats(db_id(),null,null,null,null) A
			join sys.indexes B on A.object_id = B.Object_id and A.index_id = B.index_id
            JOIN sys.partitions C ON C.object_id = B.object_id AND C.index_id = B.index_id
            JOIN sys.sysobjects D ON A.object_id = D.id
            join sys.objects E on D.id = E.object_id
            join  sys.schemas F on E.schema_id = F.schema_id
	where page_Count > 1000
            

    INSERT INTO dbo.Servidor(Nm_Servidor)
	SELECT DISTINCT A.Nm_Servidor 
	FROM #Historico_Fragmentacao_Indice A
		LEFT JOIN dbo.Servidor B ON A.Nm_Servidor = B.Nm_Servidor
	WHERE B.Nm_Servidor IS null
		
	INSERT INTO dbo.BaseDados(Nm_Database)
	SELECT DISTINCT A.Nm_Database 
	FROM #Historico_Fragmentacao_Indice A
		LEFT JOIN dbo.BaseDados B ON A.Nm_Database = B.Nm_Database
	WHERE B.Nm_Database IS null
	
	INSERT INTO dbo.Tabela(Nm_Tabela)
	SELECT DISTINCT A.Nm_Tabela 
	FROM #Historico_Fragmentacao_Indice A
		LEFT JOIN dbo.Tabela B ON A.Nm_Tabela = B.Nm_Tabela
	WHERE B.Nm_Tabela IS null	
	
    INSERT INTO Historico_Fragmentacao_Indice(Dt_Referencia,Id_Servidor,Id_BaseDados,Id_Tabela,Nm_Indice,Nm_Schema,Avg_Fragmentation_In_Percent,
			Page_Count,Fill_Factor,Fl_Compressao)	
    SELECT A.Dt_Referencia,E.Id_Servidor, D.Id_BaseDados,C.Id_Tabela,A.Nm_Indice,A.Nm_Schema,A.Avg_Fragmentation_In_Percent,A.Page_Count,A.Fill_Factor,A.Fl_Compressao 
    FROM #Historico_Fragmentacao_Indice A 
    	JOIN dbo.Tabela C ON A.Nm_Tabela = C.Nm_Tabela
		JOIN dbo.BaseDados D ON A.Nm_Database = D.Nm_Database
		JOIN dbo.Servidor E ON A.Nm_Servidor = E.Nm_Servidor 
    	LEFT JOIN Historico_Fragmentacao_Indice B ON E.Id_Servidor = B.Id_Servidor AND D.Id_BaseDados = B.Id_BaseDados  
    													AND C.Id_Tabela = B.Id_Tabela AND A.Nm_Indice = B.Nm_Indice 
    													AND CONVERT(VARCHAR, A.Dt_Referencia ,112) = CONVERT(VARCHAR, B.Dt_Referencia ,112)
	WHERE A.Nm_Indice IS NOT NULL AND B.Id_Hitorico_Fragmentacao_Indice IS NULL
    ORDER BY 2,3,4,5

	
	delete from Historico_Fragmentacao_Indice
	where Dt_Referencia < getdate()-120

        			
end

GO

if object_id('Historico_Utilizacao_Indices') is not null
	drop table Historico_Utilizacao_Indices
GO

CREATE TABLE [dbo].[Historico_Utilizacao_Indices](
[Id_Historico_Utilizacao_Indices] [int] IDENTITY(1,1) NOT NULL,
[Dt_Historico] DATE NULL,
[Id_Servidor] [smallint] NULL,
[Id_BaseDados] [smallint] NULL,
[Id_Tabela] [int] NULL,
[Nm_Indice] [varchar](1000) NULL,
[User_Seeks] [int] NULL,
[User_Scans] [int] NULL,
[User_Lookups] [int] NULL,
[User_Updates] [int] NULL,
[Ultimo_Acesso] [datetime] NULL
) ON [PRIMARY]

GO
if object_id('vwHistorico_Utilizacao_Indice') is not null
	drop view vwHistorico_Utilizacao_Indice
GO
create view vwHistorico_Utilizacao_Indice
AS
select A.Dt_Historico, B.Nm_Servidor, C.Nm_Database,D.Nm_Tabela ,A.Nm_Indice, 
	A.User_Seeks, A.User_Scans, A.User_Lookups, A.User_Updates,A.Ultimo_Acesso
from Historico_Utilizacao_Indices A
	join Servidor B on A.Id_Servidor = B.Id_Servidor
	join BaseDados C on A.Id_BaseDados = C.Id_BaseDados
	join Tabela D on A.Id_Tabela = D.Id_Tabela

GO
if object_id('stpCarga_Utilizacao_Indice') is not null
	drop procedure stpCarga_Utilizacao_Indice

GO
CREATE procedure [dbo].[stpCarga_Utilizacao_Indice]
AS
BEGIN
	SET NOCOUNT ON
	 	
	IF object_id('tempdb..#Historico_Utilizacao_Indices') IS NOT NULL DROP TABLE #Historico_Utilizacao_Indices
	
	CREATE TABLE #Historico_Utilizacao_Indices(
		[Id_Historico_Utilizacao_Indices] [int] IDENTITY(1,1) NOT NULL,
		[Dt_Historico] date NULL,
		[Nm_Servidor] [varchar](50) NULL,
		[Nm_Database] [varchar](100) NULL,
		[Nm_Tabela] [varchar](1000) NULL,
		[Nm_Indice] [varchar](1000) NULL,
		[User_Seeks] [int] NULL,
		[User_Scans] [int] NULL,
		[User_Lookups] [int] NULL,
		[User_Updates] [int] NULL,
		[Ultimo_Acesso] [datetime] NULL
	) ON [PRIMARY]

	insert into #Historico_Utilizacao_Indices(Dt_Historico, [Nm_Servidor], [Nm_Database], [Nm_Tabela], [Nm_Indice], User_Seeks, User_Scans, User_Lookups, User_Updates, Ultimo_Acesso)
 	select cast(dbo.getdate2() as date), @@servername,DB_NAME(), o.Name,i.name, s.user_seeks,s.user_scans,s.user_lookups, s.user_Updates, 
		isnull(s.last_user_seek,isnull(s.last_user_scan,s.last_User_Lookup)) Ultimo_acesso
	from sys.dm_db_index_usage_stats s
		 join sys.indexes i on i.object_id = s.object_id and i.index_id = s.index_id
		 join sys.sysobjects o on i.object_id = o.id
	where s.database_id = db_id()
	order by o.Name, i.name, s.index_id

    INSERT INTO dbo.Servidor(Nm_Servidor)
	SELECT DISTINCT A.Nm_Servidor 
	FROM #Historico_Utilizacao_Indices A
		LEFT JOIN dbo.Servidor B ON A.Nm_Servidor = B.Nm_Servidor
	WHERE B.Nm_Servidor IS null
		
	INSERT INTO dbo.BaseDados(Nm_Database)
	SELECT DISTINCT A.Nm_Database 
	FROM #Historico_Utilizacao_Indices A
		LEFT JOIN dbo.BaseDados B ON A.Nm_Database = B.Nm_Database
	WHERE B.Nm_Database IS null
	
	INSERT INTO dbo.Tabela(Nm_Tabela)
	SELECT DISTINCT A.Nm_Tabela 
	FROM #Historico_Utilizacao_Indices A
		LEFT JOIN dbo.Tabela B ON A.Nm_Tabela = B.Nm_Tabela
	WHERE B.Nm_Tabela IS null	

    INSERT INTO Historico_Utilizacao_Indices(Dt_Historico, Id_Servidor, Id_BaseDados, Id_Tabela, Nm_Indice, User_Seeks, 
							User_Scans, User_Lookups, User_Updates, Ultimo_Acesso)	
    SELECT A.Dt_Historico, E.Id_Servidor, D.Id_BaseDados,C.Id_Tabela,A.Nm_Indice,A.User_Seeks,A.User_Scans,A.User_Lookups,A.User_Updates,A.Ultimo_Acesso 
    FROM #Historico_Utilizacao_Indices A 
    	JOIN dbo.Tabela C ON A.Nm_Tabela = C.Nm_Tabela
		JOIN dbo.BaseDados D ON A.Nm_Database = D.Nm_Database
		JOIN dbo.Servidor E ON A.Nm_Servidor = E.Nm_Servidor 
    	LEFT JOIN Historico_Utilizacao_Indices B ON E.Id_Servidor = B.Id_Servidor AND D.Id_BaseDados = B.Id_BaseDados  
    													AND C.Id_Tabela = B.Id_Tabela AND A.Nm_Indice = B.Nm_Indice 
    													AND CONVERT(VARCHAR, A.Dt_Historico ,112) = CONVERT(VARCHAR, B.Dt_Historico ,112)
	WHERE A.Nm_Indice IS NOT NULL AND B.Id_Historico_Utilizacao_Indices IS NULL
    ORDER BY 2,3,4,5
	
	delete from Historico_Utilizacao_Indices
	where Dt_Historico < getdate()-120

        			
end

GO

if object_id('stpRotinas_Manutencao_DBA') is not null
	drop procedure stpRotinas_Manutencao_DBA
GO
create procedure stpRotinas_Manutencao_DBA
as
	exec stpTamanhos_Tabelas
	exec stpCarga_Fragmentacao_Indice
	exec stpCarga_Utilizacao_Indice

/*

exec stpTamanhos_Tabelas
exec stpCarga_Fragmentacao_Indice
exec stpCarga_Utilizacao_Indice


select top 10 *
from vwTamanho_Tabela
order by Nr_Tamenho_total desc

select top 10 *
from vwHistorico_Utilizacao_Indice
order by User_Seeks desc

select top 10 *
from vwHistorico_Fragmentacao_Indice
order by Avg_Fragmentation_In_Percent desc

*/


